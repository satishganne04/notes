var is Global scoped or function scoped , if it is declared outside the function it wil be global variable and if it is inside  function ,
 the function only will access , can reassign 

The let keyword allows you to declare a variable with block scope. let can reassign

const --block scoped  , cannot be reassigned 
.................................................................................................................................................

obbjects -->  object in js is collection of key vaalue pairs 

ex-const person ={ name:'satish',
                   walk() {}   ----->function in object
				   };
				   
we can access in  way --person.name  or person.methodname

................................................................................................................................................
this ketword 

this always returns reference of current object

 The value of this is determined at runtime, and can be affected by how a function is called.
 
 ............................................................................................................................................
 binding this 
 
 The .bind() method: The bind() method can be used to create a new function with a fixed this value. The first argument passed to
 the bind() method is the value that the this keyword should be set to.
 
 ..............................................................................................................................................
 
 arrow functions 
 arrow functions (also known as "fat arrow" functions) are a new way to define functions
 similar to jaa 8
 
 const method = () => connsole.log("satiash"):
 ..............................................................................................................................
 filter same as java 8
 
 let numbers = [1, 2, 3, 4, 5, 6];
let evenNumbers = numbers.filter(num => num % 2 === 0);
console.log(evenNumbers); // [2, 4, 6]
.......................................................................................................................

map
The map() method takes a callback function as an argument, which is called for each element of the array

const person =['red','green','yellow'];

const items=person.map(col => `<li>${col}</li>`);

console.log(items);
   
....................................................................................................................................
   object destructing
   
   Object destructuring in ECMAScript 6 (also known as ES6 or ECMAScript 2015) is a concise way to extract properties from an object
   and assign them to variable
   
const num = {x: 100, y: 200};  
const {x, y} = num;  
  
console.log(x); // 100  
console.log(y); // 200

................................................................................................................................................

spread opearator

ES6 introduced a new operator referred to as a spread operator, which consists of three dots (...). It allows an iterable to expand in
 places where more than zero arguments are expected.
 
 let a = [1, 2, 3];
let b = [4, 5, 6];
let c = [...a, ...b];
console.log(c); // [1, 2, 3, 4, 5, 6]

 
 ...........................................................................................................................................
 
 classes---
 
 In ECMAScript 6 (also known as ES6), classes were introduced as a way to define objects and their methods in a more object-oriented manner.
 Classes are a way to create a blueprint for objects, and can be used to create multiple objects that have the same properties and methods.
 
 ........................................................................................................................................
promises 

A Promise represents something that is eventually fulfilled. A Promise can either be rejected or resolved based on the operation outcome.

The Promise represents the completion of an asynchronous operation. It returns a single value based on the operation being rejected or resolved


Promise in JavaScript is an object representing the eventual completion or failure of an asynchronous operation. It allows you to register
 callbacks to be called when the asynchronous operation is completed or fails. A Promise can be in one of three states:

Pending: initial state, neither fulfilled nor rejected.
Fulfilled: meaning that the operation completed successfully.
Rejected: meaning that the operation failed.
You can use the then() method to register callbacks for when the Promise is fulfilled or rejected, and the catch() method to register a
 callback for when the Promise is rejected.
 
.......................................................................................................................................
callback:

"I will call back later!"

A callback is a function passed as an argument to another function

This technique allows a function to call another function

A callback function can run after another function has finished  


......................................................................................................
 Functions running in parallel with other functions are called asynchronous
 
 async and await make promises easier to write"

async makes a function return a Promise

await makes a function wait for a Promise


///////////////////////////////////////////////////////////

"async and await make promises easier to write"

async makes a function return a Promise

await makes a function wait for a Promise




 	   
				   
				   